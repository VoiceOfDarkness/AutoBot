import time
from rich.console import Console
from rich.theme import Theme
from rich.panel import Panel
from rich.live import Live
from rich.table import Table
from datetime import datetime, timedelta
from typing import List, Tuple, Callable
from core.model import UserState

custom_theme = Theme(
    {
        "info": "cyan",
        "success": "green",
        "warning": "yellow",
        "error": "red bold",
        "title": "blue bold",
        "value": "bright_white",
    }
)

console = Console(theme=custom_theme)


class GameBot:
    def __init__(self, api_client):
        self.client = api_client
        self.running = False
        self.retry_delays = [5, 10, 30, 60]
        self.status_message = "–û–∂–∏–¥–∞–Ω–∏–µ..."
        self.user_data = {}

    def run(self):
        self.running = True
        console.print(Panel("[title]üéÆ GameBot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è[/title]", expand=False))

        with Live(self._generate_status_table(), refresh_per_second=1) as live:
            while self.running:
                try:
                    self._process_cycle()
                    self.status_message = "–û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞..."
                    live.update(self._generate_status_table())
                    time.sleep(300)
                except Exception as e:
                    self._handle_error(e)
                    live.update(self._generate_status_table())

    def _generate_status_table(self) -> Table:
        table = Table(show_header=False, box=None, padding=(0, 1))

        if self.user_data:
            table.add_row(
                "[info]üí∞ –ë–∞–ª–∞–Ω—Å:[/info]",
                f"[value]{self.user_data.get('balance', 0):.2f}[/value]",
            )
            table.add_row(
                "[info]üõ°Ô∏è –©–∏—Ç:[/info]",
                f"[value]{self.user_data.get('shield', 0)} ({'–ê–∫—Ç–∏–≤–µ–Ω' if self.user_data.get('shield_active') else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'})[/value]",
            )

            times = {
                "‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–µ–π–º": self.user_data.get("claimed_last"),
                "üîÑ –°–ª–µ–¥—É—é—â–∏–π –¥–µ–π–ª–∏": self.user_data.get("daily_next_at"),
                "‚õΩ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø—Ä–∞–≤–∫–∞": self.user_data.get("fuel_last_at"),
                "üõ° –ò–º–º—É–Ω–∏—Ç–µ—Ç —â–∏—Ç–∞ –¥–æ": self.user_data.get("shield_immunity_at"),
                "üõ° –©–∏—Ç –∞–∫—Ç–∏–≤–µ–Ω –¥–æ": self.user_data.get("shield_ended_at"),
            }

            for label, time_str in times.items():
                if time_str:
                    try:
                        dt = datetime.fromisoformat(time_str.replace("Z", ""))
                        formatted_time = dt.strftime("%H:%M:%S %d.%m.%Y")
                        table.add_row(
                            f"[info]{label}:[/info]", f"[value]{formatted_time}[/value]"
                        )
                    except:
                        table.add_row(
                            f"[info]{label}:[/info]", "[value]–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö[/value]"
                        )

        table.add_row("")
        table.add_row("")
        table.add_row(f"[info]–°—Ç–∞—Ç—É—Å:[/info] {self.status_message}")

        return Panel(table, expand=False)

    def _process_cycle(self):
        try:
            user_data = self.client.get_user()
            if not user_data or "user" not in user_data:
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API")

            self.user_data = user_data["user"]
            state = UserState.from_response(user_data["user"])
            current_time = datetime.now()

            self._process_actions(state, current_time)

        except Exception as e:
            self.status_message = f"[error]–û—à–∏–±–∫–∞: {str(e)}[/error]"
            raise

    def _process_actions(self, state: UserState, current_time: datetime):
        actions: List[Tuple[Callable, Callable, str]] = [
            (state.should_claim_daily, self._daily, "–µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É"),
            (state.should_claim, self._claim, "–±–∞–ª–∞–Ω—Å"),
            (state.should_get_fuel, self._get_fuel, "—Ç–æ–ø–ª–∏–≤–æ"),
            (state.should_get_shield, self._get_shield, "—â–∏—Ç"),
            (
                state.should_get_shield_immunity,
                self._get_shield_immunity,
                "–∏–º–º—É–Ω–∏—Ç–µ—Ç —â–∏—Ç–∞",
            ),
        ]

        for should_execute, execute, action_name in actions:
            try:
                if should_execute(current_time):
                    self.status_message = f"–ü–æ–ª—É—á–∞–µ–º {action_name}..."
                    execute()
                    console.print(
                        f"[success]‚úì –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ {action_name}[/success]"
                    )
                    time.sleep(5)
            except Exception as e:
                console.print(
                    f"[error]‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {action_name}: {e}[/error]"
                )

    def _handle_error(self, error: Exception):
        for delay in self.retry_delays:
            self.status_message = f"[error]–û—à–∏–±–∫–∞: {str(error)}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...[/error]"
            time.sleep(delay)
            try:
                return
            except Exception as e:
                self.status_message = (
                    f"[error]–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ: {str(e)}[/error]"
                )

        self.status_message = "[error]–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è.[/error]"
        console.print(Panel(self.status_message, style="error"))
        self.running = False

    def _claim(self):
        response = self.client.claim()
        self.user_data = response["user"]

    def _daily(self):
        self.client.get_daily()

    def _get_fuel(self):
        self.client.get_fuel()

    def _get_shield(self):
        self.client.get_shield()

    def _get_shield_immunity(self):
        self.client.get_shield_immunity()
